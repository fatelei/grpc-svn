// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_svn_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcSvnServiceClient is the client API for GrpcSvnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcSvnServiceClient interface {
	Clone(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (*CloneResponse, error)
	UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...grpc.CallOption) (*UpdateRepoResponse, error)
}

type grpcSvnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcSvnServiceClient(cc grpc.ClientConnInterface) GrpcSvnServiceClient {
	return &grpcSvnServiceClient{cc}
}

func (c *grpcSvnServiceClient) Clone(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := c.cc.Invoke(ctx, "/grpc_svn.GrpcSvnService/Clone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcSvnServiceClient) UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...grpc.CallOption) (*UpdateRepoResponse, error) {
	out := new(UpdateRepoResponse)
	err := c.cc.Invoke(ctx, "/grpc_svn.GrpcSvnService/UpdateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcSvnServiceServer is the server API for GrpcSvnService service.
// All implementations must embed UnimplementedGrpcSvnServiceServer
// for forward compatibility
type GrpcSvnServiceServer interface {
	Clone(context.Context, *CloneRepoRequest) (*CloneResponse, error)
	UpdateRepo(context.Context, *UpdateRepoRequest) (*UpdateRepoResponse, error)
	mustEmbedUnimplementedGrpcSvnServiceServer()
}

// UnimplementedGrpcSvnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcSvnServiceServer struct {
}

func (*UnimplementedGrpcSvnServiceServer) Clone(context.Context, *CloneRepoRequest) (*CloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (*UnimplementedGrpcSvnServiceServer) UpdateRepo(context.Context, *UpdateRepoRequest) (*UpdateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepo not implemented")
}
func (*UnimplementedGrpcSvnServiceServer) mustEmbedUnimplementedGrpcSvnServiceServer() {}

func RegisterGrpcSvnServiceServer(s *grpc.Server, srv GrpcSvnServiceServer) {
	s.RegisterService(&_GrpcSvnService_serviceDesc, srv)
}

func _GrpcSvnService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSvnServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_svn.GrpcSvnService/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSvnServiceServer).Clone(ctx, req.(*CloneRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcSvnService_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSvnServiceServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_svn.GrpcSvnService/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSvnServiceServer).UpdateRepo(ctx, req.(*UpdateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcSvnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_svn.GrpcSvnService",
	HandlerType: (*GrpcSvnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clone",
			Handler:    _GrpcSvnService_Clone_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _GrpcSvnService_UpdateRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_svn.proto",
}
